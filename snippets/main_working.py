from machine import UART, I2C, Pin, Timerfrom binascii import hexlifyimport _threadimport ssd1306from sml_extr import extract_smlfrom uP_requests import *import ujsonimport gcimport timeimport network#############################################################i2c = I2C(scl=Pin(4), sda=Pin(5))oled = ssd1306.SSD1306_I2C(128, 64, i2c)timer = Timer(1)nodename = "1ESY1161426155"wifi_ssid = "CookieDough"wifi_pw = "Gaeste2049"url = "https://tb.exceeding-solutions.de/api/v1/XIM3UEFj7w9u0f9Mhl1f/telemetry"buf = bytearray(500)uart = UART(2, 9600)uart.init(9600, bits=8, parity=None, stop=1, timeout=100, timeout_char=100, rx=13, tx=15)  # init with given parameterswifi_client = network.WLAN(network.STA_IF)  # creare client interface#############################################################def read_meter_data_uart(*args):    global url    oled.fill(0)    oled.text('meter read...', 0, 0)    oled.show()    while True:        if uart.any():            uart.readinto(buf)            uart.readinto(buf)  # double read to occure a timeout and get the startsequence first            raw_str = str(hexlify(buf))            if raw_str.find("1b1b1b1b") == 2:  # SML start/end sequence                break    res = extract_sml(raw_str)    oled.fill(0)    oled.text(res["devid"], 0, 0)    oled.text("A+", 0, 15)    oled.text(res["1.8.0_Wh"], 35, 15)    oled.text("Wh", 110, 15)    oled.text("P:", 0, 30)    oled.text(res["16.7.0_W"], 35, 30)    oled.text("W", 110, 30)    oled.show()    if wifi_client.isconnected():        try:            data = ujson.dumps(res)  # data= {"temperature": 99}            r = post(url, data=data)            ult = "http code  " + str(r.status_code)            r.close()  # mandatory        except:            ult = "exception"    else:        connect_wifi()        ult = "no wifi"    oled.text(ult, 0, 50)    oled.show()    gc.collect()def get_meter_data(*args):  #_thread.start_new_thread(read_meter_data_uart, ())  read_meter_data_uart()def connect_wifi():    def wifi_result(*args):        if wifi_client.isconnected():            print('WIFI connected')            print('network config:', wifi_client.ifconfig())            oled.fill(0)            oled.text('Wifi connected!', 0, 0)            oled.show()            timer.init(period=10000, mode=Timer.PERIODIC, callback=get_meter_data)        else:            print("couldn't connect to wifi, try again")            connect_wifi()    if not wifi_client.isconnected():        wifi_client.active(True)        wifi_client.config(dhcp_hostname=nodename)        oled.fill(0)        oled.text('Wifi connecting ...', 0, 0)        oled.show()        wifi_client.connect(wifi_ssid, wifi_pw)        timer.init(period=10000, mode=Timer.ONE_SHOT, callback=wifi_result)    else:        wifi_result()    gc.collect()def bootpage():    icon = [        [0, 0, 0, 0, 0, 0, 0, 0, 0],        [0, 1, 1, 0, 0, 0, 1, 1, 0],        [1, 1, 1, 1, 0, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1],        [1, 1, 1, 1, 1, 1, 1, 1, 1],        [0, 1, 1, 1, 1, 1, 1, 1, 0],        [0, 0, 1, 1, 1, 1, 1, 0, 0],        [0, 0, 0, 1, 1, 1, 0, 0, 0],        [0, 0, 0, 0, 1, 0, 0, 0, 0],    ]    oled.fill(0)  # Clear the display    for y, row in enumerate(icon):        for x, c in enumerate(row):            oled.pixel(x+93, y+23, c)    oled.text('IoT with ', 20, 25)    oled.text('Smart Meter v0.1', 0, 50)    oled.show()#############################################################bootpage()time.sleep(2)  # 2 secondsconnect_wifi()